import pytest
import numpy as np
import pandas as pd
from unittest.mock import patch, MagicMock
from classes.profile import Input
from services.portfolio import (
    get_mu,
    run_markowitz_optimization,
    run_custom_risk_optimization,
    simulate_monte_carlo_for_weights,
    build_portfolio_response
)


@pytest.fixture
def sample_price_data():
    return pd.DataFrame({
        'AAPL': [150, 152, 154, 151],
        'GOOG': [2800, 2820, 2835, 2810],
        'SPY': [400, 402, 403, 404]
    })


@pytest.fixture
def sample_request():
    return Input(
        tickers=['AAPL', 'GOOG'],
        start_date="2022-01-01",
        end_date="2023-01-01",
        investment_amount=100000,
        target_amount=150000,
        years=5,
        use_risk_score=False,
        risk_score_percent=None
    )

##TC:068
#Test for getting mu
@patch("services.portfolio.mean_historical_return")
@patch("services.portfolio.capm_return")
def test_get_mu(mock_capm, mock_historical, sample_price_data):
    tickers = ['AAPL', 'GOOG']

    # Test historical
    mock_historical.return_value = pd.Series([0.1, 0.12], index=tickers)
    mu = get_mu(sample_price_data, tickers, method="historical_yearly_return")
    assert isinstance(mu, pd.Series)
    assert mu.index.tolist() == tickers

    # Test capm
    mock_capm.return_value = pd.Series([0.09, 0.11], index=tickers)
    mu = get_mu(sample_price_data, tickers, method="capm")
    assert isinstance(mu, pd.Series)

    # Test invalid
    with pytest.raises(ValueError):
        get_mu(sample_price_data, tickers, method="unknown")

#TC:069
#Test for running markowitz optimization
@patch("services.portfolio.get_mu")
@patch("services.portfolio.sample_cov")
@patch("services.portfolio.EfficientFrontier")
def test_run_markowitz_optimization(mock_ef_class, mock_cov, mock_mu, sample_price_data):
    tickers = ['AAPL', 'GOOG']
    mock_mu.return_value = pd.Series([0.1, 0.12], index=tickers)
    mock_cov.return_value = pd.DataFrame([[0.01, 0.001], [0.001, 0.02]], index=tickers, columns=tickers)

    mock_ef = MagicMock()
    mock_ef.max_sharpe.return_value = None
    mock_ef.clean_weights.return_value = {'AAPL': 0.6, 'GOOG': 0.4}
    mock_ef.portfolio_performance.return_value = (0.11, 0.18, 0.5)
    mock_ef_class.return_value = mock_ef

    weights, perf, mu, cov = run_markowitz_optimization(sample_price_data, tickers)
    assert weights == {'AAPL': 0.6, 'GOOG': 0.4}
    assert isinstance(perf, tuple)

#TC:070
#Test for optimization with custom risk level generated by a quiz
@patch("services.portfolio.EfficientFrontier")
@patch("services.portfolio.sample_cov")
@patch("services.portfolio.get_mu")
def test_run_custom_risk_optimization(mock_mu, mock_cov, mock_ef_class, sample_price_data):
    tickers = ['AAPL', 'GOOG']

    # Mock mu and cov
    mock_mu.return_value = pd.Series([0.1, 0.12], index=tickers)
    mock_cov.return_value = pd.DataFrame([[0.01, 0.001], [0.001, 0.02]], index=tickers, columns=tickers)

    # Mock the three EF instances
    ef_min = MagicMock()
    ef_min.min_volatility.return_value = None
    ef_min.portfolio_performance.return_value = (0.05, 0.1, 0.4)

    ef_max = MagicMock()
    ef_max.max_sharpe.return_value = None
    ef_max.portfolio_performance.return_value = (0.13, 0.16, 0.5)

    ef_final = MagicMock()
    ef_final.efficient_risk.return_value = None
    ef_final.clean_weights.return_value = {'AAPL': 0.55, 'GOOG': 0.45}
    ef_final.portfolio_performance.return_value = (0.13, 0.16, 0.5)

    # Apply side_effect to return mocks in correct sequence
    mock_ef_class.side_effect = [ef_min, ef_max, ef_final]

    weights, perf, mu, cov = run_custom_risk_optimization(sample_price_data, tickers, risk_score_percent=50)

    # Access the actual clean_weights dictionary
    weights = ef_final.clean_weights.return_value

    assert weights == {'AAPL': 0.55, 'GOOG': 0.45}
    assert perf == ef_final.portfolio_performance.return_value


#TC:071
#Test to simulate optimal weights from monte carlo projection
def test_simulate_monte_carlo_for_weights(sample_price_data):
    mu = pd.Series({'AAPL': 0.1, 'GOOG': 0.12})
    cov = pd.DataFrame([[0.01, 0.002], [0.002, 0.015]], index=['AAPL', 'GOOG'], columns=['AAPL', 'GOOG'])
    weights = {'AAPL': 0.6, 'GOOG': 0.4}
    result = simulate_monte_carlo_for_weights(mu, cov, weights, 100000, 150000, 5, 1000)
    assert "expected_final_value" in result
    assert result["success_rate_percent"] >= 0

#TC:072
#Test for building portfolio response with sharpe ratio
@patch("services.portfolio.simulate_monte_carlo_for_weights")
@patch("services.portfolio.run_markowitz_optimization")
@patch("services.portfolio.fetch_price_data")
def test_build_portfolio_response_sharpe(mock_fetch, mock_run_markowitz, mock_sim_mc, sample_request, sample_price_data):
    mock_fetch.return_value = sample_price_data
    mock_run_markowitz.return_value = (
        {"AAPL": 0.5, "GOOG": 0.5}, (0.1, 0.15, 0.6),
        pd.Series({'AAPL': 0.1, 'GOOG': 0.12}),
        pd.DataFrame([[0.01, 0.001], [0.001, 0.02]], index=['AAPL', 'GOOG'], columns=['AAPL', 'GOOG'])
    )
    mock_sim_mc.return_value = {
        "expected_final_value": 200000,
        "min_final_value": 150000,
        "max_final_value": 250000,
        "success_rate_percent": 85
    }

    result = build_portfolio_response(sample_request)
    assert result["method_used"] == "Max Sharpe Ratio"
    assert result["sharpe_ratio"] == 0.6
    assert result["goal"].startswith("$100,000.00 â†’")

#TC: 073
#test for building the portfolio response for a custom risk level
@patch("services.portfolio.simulate_monte_carlo_for_weights")
@patch("services.portfolio.run_custom_risk_optimization")
@patch("services.portfolio.fetch_price_data")
def test_build_portfolio_response_risk_score(mock_fetch, mock_run_custom, mock_sim_mc, sample_request, sample_price_data):
    sample_request.use_risk_score = True
    sample_request.risk_score_percent = 75

    mock_fetch.return_value = sample_price_data
    mock_run_custom.return_value = (
        {"AAPL": 0.7, "GOOG": 0.3}, (0.12, 0.2, 0.5),
        pd.Series({'AAPL': 0.1, 'GOOG': 0.12}),
        pd.DataFrame([[0.01, 0.001], [0.001, 0.02]], index=['AAPL', 'GOOG'], columns=['AAPL', 'GOOG'])
    )
    mock_sim_mc.return_value = {
        "expected_final_value": 180000,
        "min_final_value": 120000,
        "max_final_value": 230000,
        "success_rate_percent": 70
    }

    result = build_portfolio_response(sample_request)
    assert result["method_used"].startswith("Custom Risk Level")
    assert result["sharpe_ratio"] == 0.5



